version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cicd-dashboard-postgres
    environment:
      POSTGRES_DB: cicd_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount a directory of init scripts into Postgres init directory
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cicd-dashboard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cicd-dashboard-backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/cicd_dashboard?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=supersecretjwt
      - FRONTEND_URL=http://localhost:3000
      - JWT_EXPIRES_IN=30d
      # Gmail SMTP (App Password)
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=apurvrana009@gmail.com
      - SMTP_PASS=gtchajyxpxoiijcu
      - SMTP_FROM=CI/CD Alerts <apurvrana009@gmail.com>
      - ALERTS_ENABLED=true
      - SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
      - GITHUB_CLIENT_ID=your-github-client-id
      - GITHUB_CLIENT_SECRET=your-github-client-secret
      - GITLAB_CLIENT_ID=your-gitlab-client-id
      - GITLAB_CLIENT_SECRET=your-gitlab-client-secret
      - LOG_LEVEL=info
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3


  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: "http://localhost:5000/api/v1"
        VITE_WS_URL: "ws://localhost:5000"
        VITE_ENABLE_ALERTS: "true"
    container_name: cicd-dashboard-frontend
    environment:
      VITE_API_URL: http://localhost:5000/api/v1
      VITE_WS_URL: ws://localhost:5000
      VITE_ENABLE_ALERTS: "true"
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - cicd-network

  # Nginx Reverse Proxy (Optional)
  # nginx:
  #   image: nginx:alpine
  #   container_name: cicd-dashboard-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - cicd-network

volumes:
  postgres_data:
  redis_data:

networks:
  cicd-network:
    driver: bridge